{"version":3,"sources":["components/GridElement.jsx","components/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridElement","index","selected","onClick","className","React","forwardRef","ref","cells","useState","grid","setGrid","useEffect","console","log","newGrid","i","updateGrid","id","Array","map","cell","App","rows","setRows","cols","setCols","gridDiv","useRef","undefined","Math","floor","current","offsetHeight","offsetWidth","window","addEventListener","removeEventListener","Grid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEe,SAASA,EAAT,GAAkD,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QAElD,OACI,qBAAKC,UAAS,oBAAeF,EAAW,WAAa,IAAMC,QAAS,kBAAMA,EAAQF,M,UCA3EI,MAAMC,YAAW,WAAUC,GAAS,IAAjBC,EAAgB,EAAhBA,MAC9B,EAAwBC,mBAAS,CAAE,GAAG,EAAO,GAAG,EAAO,GAAG,EAAO,GAAG,IAApE,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,kBAAMC,QAAQC,IAAIJ,KAAO,CAACA,IAEpCE,qBAAU,WAEN,IADA,IAAIG,EAAU,GACNC,EAAI,EAAGA,EAAIR,EAAOQ,IACtBD,EAAQC,IAAK,EAGjBL,EAAQI,KACT,CAACP,IAEJ,IAAMS,EAAa,SAAChB,GAAYY,QAAQC,IAAI,kBAAmBH,EAAQ,2BAAKD,GAAN,kBAAaT,GAASS,EAAKT,OAEjG,OACE,qBAAKiB,GAAG,OAAOX,IAAKA,EAApB,SACK,YAAIY,MAAMX,IAAQY,KAAK,SAACC,EAAML,GAAP,OAAa,cAAChB,EAAD,CAAaC,MAAOe,EAAGd,SAAUQ,EAAKM,GAAIb,QAASc,GAAiBD,WCUpGM,MA5Bf,WACE,MAAwBb,mBAAS,GAAjC,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAwBf,mBAAS,GAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KACMC,EAAUC,sBAAOC,GAEjBZ,EAAa,WACdU,IACDH,EAAQM,KAAKC,MAAMJ,EAAQK,QAAQC,aAAe,KAClDP,EAAQI,KAAKC,MAAMJ,EAAQK,QAAQE,YAAc,OAYrD,OARAtB,qBAAU,WAIR,OAHAuB,OAAOC,iBAAiB,SAAUnB,GAClCA,IAEO,kBAAMkB,OAAOE,oBAAoB,SAAUpB,MACjD,IAID,sBAAKb,UAAU,MAAf,UACE,+BAAKmB,EAAOE,EAAZ,YACA,cAACa,EAAD,CAAM9B,MAAOe,EAAOE,EAAMlB,IAAKoB,QChBtBY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5039a4d1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function GridElement({index, selected, onClick}) {\n\n    return (\n        <div className={`grid-item ${selected ? 'selected' : ''}`} onClick={() => onClick(index)}></div>\n    );\n\n}","import React, { useState, useEffect } from 'react';\nimport GridElement from './GridElement';\n\nimport '../styles/grid.scss';\n\nexport default React.forwardRef(({cells}, ref) => {\n    const [grid, setGrid] = useState({ 0: false, 1: false, 2: false, 3: false });\n\n    useEffect(() => console.log(grid), [grid]);\n\n    useEffect(() => {\n        let newGrid = {};\n        for(let i = 0; i < cells; i++) {\n            newGrid[i] = false;\n        }\n\n        setGrid(newGrid);\n    }, [cells]);\n\n    const updateGrid = (index) => { console.log('onclick called'); setGrid({ ...grid, [index]: !grid[index] }); } \n\n    return (\n      <div id=\"grid\" ref={ref}>\n          {[...Array(cells)].map( (cell, i) => <GridElement index={i} selected={grid[i]} onClick={updateGrid} key={i}/>)}\n      </div>\n    );\n});","import './styles/App.scss';\n// import Grid from './components/Grid.old';\nimport Grid from './components/Grid';\nimport React, { useEffect, useState, useRef } from 'react';\n\nfunction App() {\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const gridDiv = useRef(undefined);\n  \n  const updateGrid = () => {\n    if(gridDiv) {\n      setRows(Math.floor(gridDiv.current.offsetHeight / 25));\n      setCols(Math.floor(gridDiv.current.offsetWidth / 25));\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', updateGrid);\n    updateGrid();\n\n    return () => window.removeEventListener('resize', updateGrid);\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <h1>{rows * cols} cells</h1>\n      <Grid cells={rows * cols} ref={gridDiv} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}